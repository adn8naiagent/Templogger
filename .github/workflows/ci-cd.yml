name: CI/CD Pipeline - FridgeSafe

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"
  # Database
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  # Authentication
  SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
  # Stripe Payment Processing
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  VITE_STRIPE_PUBLIC_KEY: ${{ secrets.VITE_STRIPE_PUBLIC_KEY }}
  # AI Integration
  CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}

jobs:
  # ESLint Job
  lint:
    name: ESLint Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint
        continue-on-error: true

  # TypeScript Type Checking Job
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 TypeScript compilation check
        run: npm run check

  # Jest Testing Job
  test:
    name: Jest Unit Tests
    runs-on: ubuntu-latest

    # PostgreSQL service for testing
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fridgesafe_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fridgesafe_test
        run: |
          npm run db:push

      - name: 🧪 Run Jest tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fridgesafe_test
          NODE_ENV: test
          SESSION_SECRET: test-secret
        run: npm run test

      # - name: 📊 Upload coverage reports
      #   uses: codecov/codecov-action@v5
      #   if: success()
      #   with:
      #     files: ./coverage/lcov.info
      #     fail_ci_if_error: false

  # Vite Build Job (not Next.js)
  build:
    name: Vite Build
    runs-on: ubuntu-latest
    needs: [lint, typecheck]

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application with Vite
        run: npm run build
        env:
          VITE_STRIPE_PUBLIC_KEY: ${{ secrets.VITE_STRIPE_PUBLIC_KEY }}

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            dist/
            !dist/**/*.map
          retention-days: 1

      - name: 📋 Build summary
        run: |
          echo "### 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Build size**: $(du -sh dist/ | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Files created**: $(find dist/ -type f | wc -l)" >> $GITHUB_STEP_SUMMARY

  # Database Schema Validation
  database-schema:
    name: Database Schema Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: schema_validation
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Validate database schema
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/schema_validation
        run: |
          echo "🔍 Validating Drizzle schema..."
          npm run db:push
          echo "✅ Schema validation passed"

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🛡️ Run security audit
        run: |
          echo "🔍 Running npm security audit..."
          npm audit --audit-level=moderate || true

      - name: 🚨 Check critical vulnerabilities
        run: |
          echo "🚨 Checking for critical vulnerabilities..."
          npm audit --audit-level=critical

  # Environment Variables Validation
  env-check:
    name: Environment Variables Check
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Validate required environment variables
        run: |
          echo "🔍 Checking required environment variables..."

          # Check if secrets are configured (they should be empty in public repos)
          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "⚠️ DATABASE_URL not configured"
          else
            echo "✅ DATABASE_URL configured"
          fi

          if [ -z "${{ secrets.STRIPE_SECRET_KEY }}" ]; then
            echo "⚠️ STRIPE_SECRET_KEY not configured"
          else
            echo "✅ STRIPE_SECRET_KEY configured"
          fi

          if [ -z "${{ secrets.VITE_STRIPE_PUBLIC_KEY }}" ]; then
            echo "⚠️ VITE_STRIPE_PUBLIC_KEY not configured"
          else
            echo "✅ VITE_STRIPE_PUBLIC_KEY configured"
          fi

          echo "📋 Environment check completed"

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: staging

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 🚀 Deploy to Railway Staging
        run: |
          echo "🚀 Deploying FridgeSafe to staging environment..."
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add Railway CLI deployment command here:
          # npx @railway/cli deploy --environment staging
          echo "✅ Staging deployment completed"

      - name: 📋 Deployment Summary
        run: |
          echo "### 🚀 Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Status**: ✅ Deployed" >> $GITHUB_STEP_SUMMARY

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test, security, database-schema]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 🚀 Deploy to Railway Production
        run: |
          echo "🚀 Deploying FridgeSafe to production environment..."
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add Railway CLI deployment command here:
          # npx @railway/cli deploy --environment production
          echo "✅ Production deployment completed"

      - name: 📋 Production Deployment Summary
        run: |
          echo "### 🎉 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Live" >> $GITHUB_STEP_SUMMARY

      - name: 🔄 Health Check
        run: |
          echo "🏥 Running post-deployment health checks..."
          # Add health check commands here
          # curl -f https://your-app.railway.app/api/health || exit 1
          echo "✅ Health checks passed"

  # Notification Job
  notify:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always() && (needs.deploy-production.result != 'skipped' || needs.deploy-staging.result != 'skipped')

    steps:
      - name: 🎉 Success Notification
        if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success'
        run: |
          echo "🎉 FridgeSafe deployment successful!"
          echo "Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}"
          # Add Slack/Discord/Teams notification here:
          # curl -X POST -H 'Content-type: application/json' --data '{"text":"🎉 FridgeSafe deployed successfully!"}' $SLACK_WEBHOOK_URL

      - name: 💥 Failure Notification
        if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure'
        run: |
          echo "💥 FridgeSafe deployment failed!"
          echo "Please check the logs and take action."
          # Add failure notification here:
          # curl -X POST -H 'Content-type: application/json' --data '{"text":"💥 FridgeSafe deployment failed!"}' $SLACK_WEBHOOK_URL
