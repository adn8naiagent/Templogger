name: Apply Database Migration After Merge
on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  migrate:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Generate and Apply Migration
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "üîÑ Generating migration between dev and production..."
          
          # Clean workspace
          rm -rf supabase
          mkdir -p supabase
          
          # Initialize Supabase
          supabase init
          
          # Link to dev project using access token (no password needed with token)
          supabase link --project-ref ${{ secrets.SUPABASE_DEV_PROJECT_REF }}
          
          # Generate diff between dev and prod
          # Using the correct secret names from your GitHub
          supabase db diff \
            --schema public,auth,storage \
            --db-url "${{ secrets.SUPABASE_PROD_DB_URL }}" \
            --file supabase/migration.sql
          
          # Check if migration file has content
          if [ ! -s supabase/migration.sql ]; then
            echo "‚úÖ No database changes detected between dev and production"
            exit 0
          fi
          
          echo "üìã Migration changes detected:"
          echo "================================"
          cat supabase/migration.sql
          echo "================================"
          
          # Safety check for destructive operations
          DANGEROUS_PATTERNS="DROP TABLE|DROP COLUMN|DROP INDEX|DROP VIEW|DROP FUNCTION|DELETE FROM|TRUNCATE|ALTER COLUMN.*TYPE"
          
          if grep -iE "($DANGEROUS_PATTERNS)" supabase/migration.sql; then
            echo "::error::‚ùå DESTRUCTIVE OPERATIONS DETECTED!"
            echo ""
            echo "Found the following dangerous operations:"
            grep -iE "($DANGEROUS_PATTERNS)" supabase/migration.sql
            echo ""
            echo "::error::Manual intervention required. Please handle these changes safely:"
            echo "1. For renames: Create new, migrate data, then remove old after code update"
            echo "2. For type changes: Create new column, migrate data, update code, then remove old"
            echo "3. For deletions: Ensure no dependencies exist and data is backed up"
            
            # Save migration as artifact for review
            mkdir -p artifacts
            cp supabase/migration.sql artifacts/blocked_migration_$(date +%Y%m%d_%H%M%S).sql
            exit 1
          fi
          
          echo "‚úÖ Safety check passed - no destructive operations found"
          
          # Apply migration to production
          echo "üöÄ Applying migration to production..."
          
          # Apply using the production database URL
          psql "${{ secrets.SUPABASE_PROD_DB_URL }}" -f supabase/migration.sql
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Migration successfully applied to production!"
          else
            echo "::error::‚ùå Migration failed to apply"
            exit 1
          fi
      
      - name: Upload Migration Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: migration-files
          path: |
            supabase/migration.sql
            artifacts/*.sql
          retention-days: 30
