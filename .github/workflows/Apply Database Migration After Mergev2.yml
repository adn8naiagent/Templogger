name: Apply Database Migration After Merge
on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  migrate:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install migra
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip postgresql-client
          pip3 install migra
      
      - name: Generate and Apply Migration
        run: |
          echo "üîÑ Generating migration between dev and production..."
          
          # Use migra to compare databases directly
          # This compares PROD (target) to DEV (source) to find what needs to be added to PROD
          migra \
            --unsafe \
            "${{ secrets.SUPABASE_PROD_DB_URL }}" \
            "${{ secrets.SUPABASE_DEV_DB_URL }}" \
            > migration.sql
          
          # Check if migration file has content
          if [ ! -s migration.sql ]; then
            echo "‚úÖ No database changes detected between dev and production"
            exit 0
          fi
          
          echo "üìã Migration changes detected:"
          echo "================================"
          cat migration.sql
          echo "================================"
          
          # Safety check for destructive operations
          DANGEROUS_PATTERNS="DROP TABLE|DROP COLUMN|DROP INDEX|DROP VIEW|DROP FUNCTION|DROP SCHEMA|DELETE FROM|TRUNCATE|ALTER COLUMN.*TYPE"
          
          if grep -iE "($DANGEROUS_PATTERNS)" migration.sql; then
            echo "‚ùå DESTRUCTIVE OPERATIONS DETECTED!"
            echo ""
            echo "Found the following dangerous operations:"
            grep -iE "($DANGEROUS_PATTERNS)" migration.sql
            echo ""
            echo "Manual intervention required. Please handle these changes safely:"
            echo "1. For renames: Create new, migrate data, then remove old after code update"
            echo "2. For type changes: Create new column, migrate data, update code, then remove old"
            echo "3. For deletions: Ensure no dependencies exist and data is backed up"
            
            # Save migration for manual review
            mkdir -p artifacts
            cp migration.sql artifacts/blocked_migration_$(date +%Y%m%d_%H%M%S).sql
            exit 1
          fi
          
          echo "‚úÖ Safety check passed - no destructive operations found"
          
          # Apply migration to production
          echo "üöÄ Applying migration to production..."
          
          psql "${{ secrets.SUPABASE_PROD_DB_URL }}" < migration.sql
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Migration successfully applied to production!"
            
            # Save successful migration
            mkdir -p artifacts
            cp migration.sql artifacts/applied_migration_$(date +%Y%m%d_%H%M%S).sql
          else
            echo "‚ùå Migration failed to apply"
            exit 1
          fi
      
      - name: Upload Migration Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migration-${{ github.run_number }}-${{ github.run_attempt }}
          path: |
            migration.sql
            artifacts/*.sql
          retention-days: 30
          if-no-files-found: ignore
