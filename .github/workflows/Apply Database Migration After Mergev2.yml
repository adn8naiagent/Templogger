name: Apply Database Migration After Merge
on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  migrate:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Install PostgreSQL Client
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /etc/apt/trusted.gpg.d/pgdg.asc &>/dev/null
          sudo apt update
          sudo apt install postgresql-client-16 -y
      
      - name: Generate and Apply Migration
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          # Extract project reference from prod URL
          PROD_PROJECT_REF=$(echo "${{ secrets.SUPABASE_PROD_DB_URL }}" | sed -n 's/.*db\.\([a-z]*\)\.supabase\.co.*/\1/p')
          
          # Create workspace directory
          mkdir -p workspace
          cd workspace
          
          # Initialize for dev project
          supabase init
          supabase link --project-ref ${{ secrets.SUPABASE_DEV_PROJECT_REF }}
          
          # Dump dev schema
          pg_dump "${{ secrets.SUPABASE_DEV_DB_URL }}" \
            --schema=public \
            --no-owner \
            --no-privileges \
            --no-tablespaces \
            --no-security-labels \
            --no-comments \
            --schema-only \
            -f dev_schema.sql
          
          # Dump prod schema  
          pg_dump "${{ secrets.SUPABASE_PROD_DB_URL }}" \
            --schema=public \
            --no-owner \
            --no-privileges \
            --no-tablespaces \
            --no-security-labels \
            --no-comments \
            --schema-only \
            -f prod_schema.sql
          
          # Use Supabase's built-in diff
          supabase db diff --use-pg-dump \
            --file migration.sql \
            dev_schema.sql \
            prod_schema.sql || {
              # Fallback: simple diff
              diff -u prod_schema.sql dev_schema.sql > migration.sql || true
            }
          
          # Process the diff to create executable SQL
          if [ -s migration.sql ]; then
            echo "Raw diff found, processing..."
            
            # Extract only the SQL commands we want
            grep -E "^(CREATE|ALTER|INSERT|UPDATE)" migration.sql > clean_migration.sql || true
            
            if [ -s clean_migration.sql ]; then
              mv clean_migration.sql migration.sql
              
              echo "Migration to apply:"
              cat migration.sql
              
              # Safety check
              if grep -iE "(DROP TABLE|DROP COLUMN|DELETE FROM|TRUNCATE|ALTER COLUMN.*TYPE)" migration.sql; then
                echo "DESTRUCTIVE OPERATIONS DETECTED!"
                exit 1
              fi
              
              # Apply migration
              echo "Applying migration to production..."
              psql "${{ secrets.SUPABASE_PROD_DB_URL }}" -f migration.sql
              echo "Migration completed successfully"
            else
              echo "No valid SQL changes found"
            fi
          else
            echo "No schema changes detected"
          fi
      
      - name: Save Migration Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migration-attempt-${{ github.sha }}
          path: |
            workspace/*.sql
          if-no-files-found: ignore
