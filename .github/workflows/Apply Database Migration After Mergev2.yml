name: Apply Database Migration After Merge
on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  migrate:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Generate and Apply Migration
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "Generating migration between dev and production..."
          
          # Create clean workspace
          rm -rf supabase
          mkdir -p temp_workspace
          cd temp_workspace
          
          # Initialize and link to dev project
          supabase init
          supabase link --project-ref ${{ secrets.SUPABASE_DEV_PROJECT_REF }} --password "$SUPABASE_DB_PASSWORD"
          
          # Use Supabase CLI to generate diff against production
          supabase db diff \
            --db-url "${{ secrets.SUPABASE_PROD_DB_URL }}" \
            --file migration.sql \
            --schema public
          
          # Check if migration file has content
          if [ -s migration.sql ]; then
            echo "üìã Migration preview:"
            cat migration.sql
            
            # Safety check for destructive operations
            if grep -iE "(DROP TABLE|DROP COLUMN|DELETE FROM|TRUNCATE|ALTER COLUMN.*TYPE)" migration.sql; then
              echo "::error::‚ùå DESTRUCTIVE OPERATIONS DETECTED!"
              echo "::error::The following destructive operations were found:"
              grep -iE "(DROP TABLE|DROP COLUMN|DELETE FROM|TRUNCATE|ALTER COLUMN.*TYPE)" migration.sql
              
              # Check for potential rename pattern
              if grep -E "CREATE TABLE" migration.sql && grep -E "DROP TABLE" migration.sql; then
                echo "::warning::This might be a table rename - manual data migration required"
              fi
              if grep -E "ADD COLUMN" migration.sql && grep -E "DROP COLUMN" migration.sql; then
                echo "::warning::This might be a column rename - manual data migration required"
              fi
              
              exit 1
            fi
            
            # Check for RLS policies
            if grep -E "(CREATE POLICY|ALTER POLICY|DROP POLICY|ENABLE ROW LEVEL SECURITY)" migration.sql; then
              echo "üìî RLS policy changes detected"
            fi
            
            # Apply the migration
            echo "üöÄ Applying migration to production..."
            psql "${{ secrets.SUPABASE_PROD_DB_URL }}" -f migration.sql
            echo "‚úÖ Migration completed successfully"
            
          else
            echo "‚úÖ No database changes detected between dev and production"
          fi
      
      - name: Save Migration Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migration-${{ github.sha }}
          path: temp_workspace/migration.sql
          if-no-files-found: ignore
