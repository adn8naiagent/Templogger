name: Apply Database Migration After Merge
on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:

jobs:
  migrate:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate and Apply Migration
        run: |
          echo "üîÑ Generating migration between dev and production..."
          
          # Create migration file
          > migration.sql
          
          # Get schema differences using psql directly (no containers)
          echo "Comparing schemas..."
          
          # Find tables in dev but not in prod
          psql "${{ secrets.SUPABASE_DEV_DB_URL }}" -t -A -c "
            SELECT 'CREATE TABLE IF NOT EXISTS public.' || table_name || ' (LIKE public.' || table_name || ' INCLUDING ALL);'
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            AND table_name NOT IN (
              SELECT table_name FROM information_schema.tables 
              WHERE table_schema = 'public' 
              AND table_type = 'BASE TABLE'
            )
          " >> migration.sql || echo "Could not compare tables directly"
          
          # If direct comparison fails, use file-based approach
          if [ ! -s migration.sql ]; then
            echo "Using file-based comparison..."
            
            psql "${{ secrets.SUPABASE_DEV_DB_URL }}" -t -A -c "
              SELECT table_name FROM information_schema.tables 
              WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
              ORDER BY table_name
            " > dev_tables.txt
            
            psql "${{ secrets.SUPABASE_PROD_DB_URL }}" -t -A -c "
              SELECT table_name FROM information_schema.tables 
              WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
              ORDER BY table_name
            " > prod_tables.txt
            
            # Find new tables
            NEW_TABLES=$(comm -13 prod_tables.txt dev_tables.txt)
            
            for table in $NEW_TABLES; do
              echo "Adding table: $table"
              
              # Get CREATE TABLE statement
              psql "${{ secrets.SUPABASE_DEV_DB_URL }}" -t -A -c "
                SELECT 'CREATE TABLE IF NOT EXISTS public.$table (' || 
                  string_agg(
                    column_name || ' ' || 
                    data_type || 
                    CASE WHEN character_maximum_length IS NOT NULL 
                      THEN '(' || character_maximum_length || ')' 
                      ELSE '' 
                    END ||
                    CASE WHEN is_nullable = 'NO' THEN ' NOT NULL' ELSE '' END ||
                    CASE WHEN column_default IS NOT NULL THEN ' DEFAULT ' || column_default ELSE '' END,
                    ', '
                  ) || ');'
                FROM information_schema.columns
                WHERE table_schema = 'public' AND table_name = '$table'
              " >> migration.sql
            done
          fi
          
          # Check if migration has content
          if [ ! -s migration.sql ] || [ $(grep -c 'CREATE\|ALTER' migration.sql) -eq 0 ]; then
            echo "‚úÖ No database changes detected"
            exit 0
          fi
          
          echo "üìã Migration to apply:"
          cat migration.sql
          
          # Safety check
          if grep -iE "(DROP|DELETE FROM|TRUNCATE)" migration.sql; then
            echo "‚ùå Destructive operations detected!"
            exit 1
          fi
          
          # Apply migration
          echo "üöÄ Applying migration..."
          psql "${{ secrets.SUPABASE_PROD_DB_URL }}" < migration.sql
          
          echo "‚úÖ Migration complete!"
      
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migration-${{ github.run_number }}
          path: |
            *.sql
            *.txt
          retention-days: 30
          if-no-files-found: ignore
