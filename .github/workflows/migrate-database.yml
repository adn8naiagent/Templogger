name: üöÄ Deploy Database Migrations to Production

on:
  # Trigger on successful PR merges to main branch
  push:
    branches: [main]
    paths: 
      - 'prisma/migrations/**'
      - 'prisma/schema.prisma'
  
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even with warnings (use with caution)'
        required: false
        default: 'false'
        type: boolean

jobs:
  migrate-production:
    name: üîÑ Apply Migrations to Production
    runs-on: ubuntu-latest
    
    environment: production
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: üìö Install dependencies
        run: npm ci
        
      - name: üîç Check migration status
        env:
          DATABASE_URL: ${{ secrets.NEON_PROD_DATABASE_URL }}
        run: |
          echo "üîç Checking current migration status..."
          npx prisma migrate status
          
      - name: üìã List pending migrations
        env:
          DATABASE_URL: ${{ secrets.NEON_PROD_DATABASE_URL }}
        run: |
          echo "üìã Checking for pending migrations..."
          PENDING=$(npx prisma migrate status --json | jq -r '.pendingMigrations[]?.name // empty')
          
          if [ -z "$PENDING" ]; then
            echo "‚úÖ No pending migrations found"
            echo "PENDING_MIGRATIONS=" >> $GITHUB_ENV
          else
            echo "üìù Pending migrations:"
            echo "$PENDING"
            echo "PENDING_MIGRATIONS<<EOF" >> $GITHUB_ENV
            echo "$PENDING" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          
      - name: üõ°Ô∏è Safety check for destructive operations
        if: env.PENDING_MIGRATIONS != ''
        run: |
          echo "üõ°Ô∏è Scanning migration files for destructive operations..."
          
          # Define destructive patterns
          DESTRUCTIVE_PATTERNS=(
            "DROP TABLE"
            "DROP COLUMN"
            "DELETE FROM"
            "TRUNCATE"
            "ALTER COLUMN.*TYPE"
            "ALTER TABLE.*DROP"
          )
          
          FOUND_DESTRUCTIVE=false
          DESTRUCTIVE_OPERATIONS=""
          
          # Scan each pending migration
          while IFS= read -r migration; do
            if [ -n "$migration" ]; then
              MIGRATION_FILE="prisma/migrations/$migration/migration.sql"
              if [ -f "$MIGRATION_FILE" ]; then
                echo "üîç Checking migration: $migration"
                
                for pattern in "${DESTRUCTIVE_PATTERNS[@]}"; do
                  if grep -qi "$pattern" "$MIGRATION_FILE"; then
                    echo "‚ö†Ô∏è  DESTRUCTIVE OPERATION DETECTED: $pattern in $migration"
                    FOUND_DESTRUCTIVE=true
                    DESTRUCTIVE_OPERATIONS+="- $migration: Contains $pattern"$'\n'
                  fi
                done
              fi
            fi
          done <<< "$PENDING_MIGRATIONS"
          
          if [ "$FOUND_DESTRUCTIVE" = true ]; then
            echo "üö® DESTRUCTIVE OPERATIONS DETECTED:"
            echo "$DESTRUCTIVE_OPERATIONS"
            echo "DESTRUCTIVE_FOUND=true" >> $GITHUB_ENV
            echo "DESTRUCTIVE_DETAILS<<EOF" >> $GITHUB_ENV
            echo "$DESTRUCTIVE_OPERATIONS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            if [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
              echo "‚ùå Migration blocked due to destructive operations"
              echo "üí° To force deployment, use workflow_dispatch with force_deploy=true"
              exit 1
            else
              echo "‚ö†Ô∏è  FORCING deployment despite destructive operations"
            fi
          else
            echo "‚úÖ No destructive operations detected"
            echo "DESTRUCTIVE_FOUND=false" >> $GITHUB_ENV
          fi
          
      - name: üìä Migration summary
        if: env.PENDING_MIGRATIONS != ''
        run: |
          echo "üìä MIGRATION SUMMARY"
          echo "===================="
          echo "üéØ Target: Production Database"
          echo "üìù Pending Migrations:"
          
          while IFS= read -r migration; do
            if [ -n "$migration" ]; then
              echo "  ‚Ä¢ $migration"
            fi
          done <<< "$PENDING_MIGRATIONS"
          
          if [ "$DESTRUCTIVE_FOUND" = "true" ]; then
            echo ""
            echo "‚ö†Ô∏è  DESTRUCTIVE OPERATIONS:"
            echo "$DESTRUCTIVE_DETAILS"
          fi
          
          echo ""
          echo "üöÄ Ready to deploy migrations..."
          
      - name: üöÄ Deploy migrations to production
        if: env.PENDING_MIGRATIONS != ''
        env:
          DATABASE_URL: ${{ secrets.NEON_PROD_DATABASE_URL }}
        run: |
          echo "üöÄ Deploying migrations to production..."
          echo "üìç Database: $(echo $DATABASE_URL | sed 's/:[^:]*@/:***@/' | sed 's/\?.*$//')"
          
          # Deploy migrations
          npx prisma migrate deploy
          
          echo "‚úÖ Migrations deployed successfully!"
          
      - name: ‚úÖ Verify deployment
        if: env.PENDING_MIGRATIONS != ''
        env:
          DATABASE_URL: ${{ secrets.NEON_PROD_DATABASE_URL }}
        run: |
          echo "‚úÖ Verifying migration deployment..."
          
          # Check final status
          npx prisma migrate status
          
          echo "üéâ Production database is up to date!"
          
      - name: üìù Create deployment summary
        if: env.PENDING_MIGRATIONS != ''
        run: |
          echo "## üöÄ Database Migration Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** Production (Neon)" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Applied Migrations:" >> $GITHUB_STEP_SUMMARY
          
          while IFS= read -r migration; do
            if [ -n "$migration" ]; then
              echo "- \`$migration\`" >> $GITHUB_STEP_SUMMARY
            fi
          done <<< "$PENDING_MIGRATIONS"
          
          if [ "$DESTRUCTIVE_FOUND" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ö†Ô∏è Destructive Operations Applied:" >> $GITHUB_STEP_SUMMARY
            echo "$DESTRUCTIVE_DETAILS" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Status:** Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
          
      - name: üì¢ No migrations notice
        if: env.PENDING_MIGRATIONS == ''
        run: |
          echo "üì¢ No pending migrations found - production database is already up to date"
          echo "## ‚ÑπÔ∏è Database Migration Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Result:** No pending migrations" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Production database is up to date ‚úÖ" >> $GITHUB_STEP_SUMMARY