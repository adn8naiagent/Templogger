name: üöÄ Deploy Database Migrations to Production

on:
  # Trigger on successful PR merges to main branch
  push:
    branches: [main]
    paths: 
      - 'prisma/migrations/**'
      - 'prisma/schema.prisma'
  
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even with destructive operations (use with extreme caution)'
        required: false
        default: 'false'
        type: boolean

jobs:
  migrate-production:
    name: üîÑ Apply Database Migrations
    runs-on: ubuntu-latest
    
    environment: production
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: üìö Install dependencies
        run: npm ci
        
      - name: üîß Generate Prisma Client
        env:
          DATABASE_URL: ${{ secrets.NEON_PROD_DATABASE_URL }}
        run: |
          echo "üîß Generating Prisma Client..."
          npx prisma generate
        
      - name: üìã Check migration status
        id: migration_check
        env:
          DATABASE_URL: ${{ secrets.NEON_PROD_DATABASE_URL }}
        run: |
          echo "üìã Checking migration status against production database..."
          
          # Run migrate status and capture both output and exit code
          set +e  # Don't exit on error
          STATUS_OUTPUT=$(npx prisma migrate status 2>&1)
          STATUS_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          echo "Migration status output:"
          echo "$STATUS_OUTPUT"
          echo ""
          
          # Check if there are pending migrations
          if echo "$STATUS_OUTPUT" | grep -q "Following migration have not yet been applied:"; then
            echo "‚úÖ Pending migrations detected"
            echo "has_pending=true" >> $GITHUB_OUTPUT
            
            # Extract pending migration names
            PENDING_MIGRATIONS=$(echo "$STATUS_OUTPUT" | sed -n '/Following migration have not yet been applied:/,$p' | tail -n +2 | grep -E '^[0-9]{14}_' || echo "")
            echo "pending_migrations<<EOF" >> $GITHUB_OUTPUT
            echo "$PENDING_MIGRATIONS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "üìù Pending migrations to apply:"
            echo "$PENDING_MIGRATIONS"
            
          elif echo "$STATUS_OUTPUT" | grep -q "Database schema is up to date"; then
            echo "‚úÖ No pending migrations - database is up to date"
            echo "has_pending=false" >> $GITHUB_OUTPUT
            echo "pending_migrations=" >> $GITHUB_OUTPUT
            
          else
            echo "‚ùå Unexpected migration status output"
            echo "STATUS_OUTPUT:"
            echo "$STATUS_OUTPUT"
            exit 1
          fi
        
      - name: üìÇ List migration files
        if: steps.migration_check.outputs.has_pending == 'true'
        run: |
          echo "üìÇ Available migration files in prisma/migrations/:"
          ls -la prisma/migrations/ || echo "No migrations directory found"
          echo ""
          
          if [ -d "prisma/migrations" ]; then
            for dir in prisma/migrations/*/; do
              if [ -d "$dir" ]; then
                migration_name=$(basename "$dir")
                echo "üìÅ Migration: $migration_name"
                if [ -f "$dir/migration.sql" ]; then
                  echo "   ‚úÖ migration.sql exists ($(wc -l < "$dir/migration.sql") lines)"
                else
                  echo "   ‚ùå migration.sql missing"
                fi
              fi
            done
          fi
        
      - name: üõ°Ô∏è Safety check for destructive operations
        if: steps.migration_check.outputs.has_pending == 'true'
        id: safety_check
        run: |
          echo "üõ°Ô∏è Scanning pending migrations for destructive operations..."
          
          # Define patterns for destructive operations
          DESTRUCTIVE_PATTERNS=(
            "DROP TABLE"
            "DROP COLUMN"
            "DELETE FROM"
            "TRUNCATE TABLE"
            "TRUNCATE "
            "ALTER TABLE.*DROP"
            "ALTER COLUMN.*TYPE"
            "ALTER.*COLUMN.*TYPE"
          )
          
          FOUND_DESTRUCTIVE=false
          DESTRUCTIVE_DETAILS=""
          
          # Get pending migrations from previous step
          PENDING_MIGRATIONS="${{ steps.migration_check.outputs.pending_migrations }}"
          
          # Check each pending migration file
          while IFS= read -r migration; do
            if [ -n "$migration" ]; then
              MIGRATION_FILE="prisma/migrations/$migration/migration.sql"
              
              if [ -f "$MIGRATION_FILE" ]; then
                echo "üîç Scanning migration: $migration"
                
                # Check for destructive patterns
                for pattern in "${DESTRUCTIVE_PATTERNS[@]}"; do
                  if grep -qi "$pattern" "$MIGRATION_FILE"; then
                    echo "‚ö†Ô∏è  DESTRUCTIVE OPERATION FOUND: $pattern in $migration"
                    FOUND_DESTRUCTIVE=true
                    DESTRUCTIVE_DETAILS="$DESTRUCTIVE_DETAILS- $migration: Contains '$pattern'"$'\n'
                  fi
                done
              else
                echo "‚ùå Migration file not found: $MIGRATION_FILE"
                exit 1
              fi
            fi
          done <<< "$PENDING_MIGRATIONS"
          
          # Set outputs and decide if we should proceed
          echo "found_destructive=$FOUND_DESTRUCTIVE" >> $GITHUB_OUTPUT
          echo "destructive_details<<EOF" >> $GITHUB_OUTPUT
          echo "$DESTRUCTIVE_DETAILS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          if [ "$FOUND_DESTRUCTIVE" = "true" ]; then
            echo ""
            echo "üö® DESTRUCTIVE OPERATIONS DETECTED:"
            echo "$DESTRUCTIVE_DETAILS"
            echo ""
            
            if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
              echo "‚ö†Ô∏è  FORCE DEPLOY ENABLED - Proceeding despite destructive operations"
              echo "üö® This was manually forced via workflow_dispatch input"
            else
              echo "‚ùå Deployment blocked due to destructive operations"
              echo "üí° To override this safety check:"
              echo "   1. Use 'Run workflow' button in GitHub Actions"
              echo "   2. Set 'force_deploy' to 'true'"
              echo "   3. Only do this if you understand the consequences"
              exit 1
            fi
          else
            echo "‚úÖ No destructive operations detected - safe to proceed"
          fi
        
      - name: üìä Pre-deployment summary
        if: steps.migration_check.outputs.has_pending == 'true'
        run: |
          echo "üìä DEPLOYMENT SUMMARY"
          echo "===================="
          echo "üéØ Target: Production Database (Neon)"
          echo "üïê Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          echo "üìù Migrations to apply:"
          PENDING_MIGRATIONS="${{ steps.migration_check.outputs.pending_migrations }}"
          while IFS= read -r migration; do
            if [ -n "$migration" ]; then
              echo "  ‚Ä¢ $migration"
            fi
          done <<< "$PENDING_MIGRATIONS"
          
          if [ "${{ steps.safety_check.outputs.found_destructive }}" = "true" ]; then
            echo ""
            echo "‚ö†Ô∏è  Destructive operations detected:"
            echo "${{ steps.safety_check.outputs.destructive_details }}"
            if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
              echo "üö® FORCE DEPLOYMENT ENABLED"
            fi
          fi
          
          echo ""
          echo "üöÄ Ready to deploy migrations..."
        
      - name: üöÄ Deploy migrations to production
        if: steps.migration_check.outputs.has_pending == 'true'
        env:
          DATABASE_URL: ${{ secrets.NEON_PROD_DATABASE_URL }}
        run: |
          echo "üöÄ Deploying migrations to production..."
          
          # Mask sensitive parts of database URL for logging
          MASKED_URL=$(echo "$DATABASE_URL" | sed 's/:\/\/[^:]*:[^@]*@/:\/\/***:***@/')
          echo "üìç Target database: $MASKED_URL"
          echo ""
          
          echo "‚ñ∂Ô∏è  Running: npx prisma migrate deploy"
          npx prisma migrate deploy
          
          echo ""
          echo "‚úÖ Migration deployment completed successfully!"
        
      - name: ‚úÖ Verify deployment
        if: steps.migration_check.outputs.has_pending == 'true'
        env:
          DATABASE_URL: ${{ secrets.NEON_PROD_DATABASE_URL }}
        run: |
          echo "‚úÖ Verifying migration deployment..."
          
          # Check final migration status
          echo "Running final migration status check..."
          npx prisma migrate status || true
          
          echo ""
          echo "üéâ Production database migrations completed successfully!"
        
      - name: üìù Create deployment summary
        if: steps.migration_check.outputs.has_pending == 'true'
        run: |
          echo "## üöÄ Database Migration Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** Production (Neon Database)" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered By:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ‚úÖ Applied Migrations:" >> $GITHUB_STEP_SUMMARY
          PENDING_MIGRATIONS="${{ steps.migration_check.outputs.pending_migrations }}"
          while IFS= read -r migration; do
            if [ -n "$migration" ]; then
              echo "- \`$migration\`" >> $GITHUB_STEP_SUMMARY
            fi
          done <<< "$PENDING_MIGRATIONS"
          
          if [ "${{ steps.safety_check.outputs.found_destructive }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ö†Ô∏è Destructive Operations Applied:" >> $GITHUB_STEP_SUMMARY
            echo "**Warning:** This deployment included destructive database operations." >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
              echo "**Force Deploy:** Enabled via manual workflow trigger" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ‚úÖ Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
        
      - name: ‚ÑπÔ∏è No migrations needed
        if: steps.migration_check.outputs.has_pending == 'false'
        run: |
          echo "‚ÑπÔ∏è  No pending migrations found"
          echo "Production database is already up to date with the latest schema"
          
          echo "## ‚ÑπÔ∏è Database Migration Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Result:** No pending migrations detected" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Production database is up to date ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "**Check Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY