name: FridgeSafe CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  VITE_STRIPE_PUBLIC_KEY: ${{ secrets.VITE_STRIPE_PUBLIC_KEY }}
  CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}

jobs:
  # Security Check Job
  security:
    name: Snyk Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run Snyk security scan
        run: npm run security:test || echo "Security issues found - review required"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Parallel Quality Checks
  lint:
    name: ESLint Code Quality
    runs-on: ubuntu-latest
    needs: [security]

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

  prettier:
    name: Prettier Code Format
    runs-on: ubuntu-latest
    needs: [security]

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎨 Check code formatting
        run: npm run format:check

  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: [security]

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 TypeScript compilation check
        run: npm run type-check

  # Unit Tests Job
  test:
    name: Jest Unit Tests
    runs-on: ubuntu-latest
    needs: [lint, prettier, typecheck]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fridgesafe_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fridgesafe_test
        run: npm run db:push

      - name: 🧪 Run Jest tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fridgesafe_test
          NODE_ENV: test
          SESSION_SECRET: test-secret
        run: npm run test

  # Build Application Job
  build:
    name: Vite Build Application
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application with Vite
        run: npm run build
        env:
          VITE_STRIPE_PUBLIC_KEY: ${{ secrets.VITE_STRIPE_PUBLIC_KEY }}

      - name: 📋 Build summary
        run: |
          echo "### 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Build size**: $(du -sh dist/ | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Files created**: $(find dist/ -type f | wc -l)" >> $GITHUB_STEP_SUMMARY

  # Deployment Status Job
  deployment:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🚀 Deployment ready
        run: |
          echo "### 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Ready for deployment" >> $GITHUB_STEP_SUMMARY